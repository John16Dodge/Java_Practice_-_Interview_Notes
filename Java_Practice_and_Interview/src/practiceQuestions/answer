Solution Code
Student.java (Abstract Class)
This class serves as the blueprint for all student types, enforcing the calculateGPA() method through abstraction. It also uses encapsulation to protect its data.

Java

import java.util.ArrayList;
import java.util.List;

public abstract class Student {
    // Encapsulated data
    private String name;
    private int id;
    private List<Double> grades;

    public Student(String name, int id) {
        this.name = name;
        this.id = id;
        this.grades = new ArrayList<>();
    }

    // Abstract method to be implemented by subclasses
    public abstract double calculateGPA();

    // Public getters and setters (Encapsulation)
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public List<Double> getGrades() {
        return grades;
    }

    public void addGrade(double grade) {
        this.grades.add(grade);
    }
}
UndergraduateStudent.java (Subclass)
This class inherits from Student and provides its own specific implementation for calculateGPA().

Java

import java.util.List;

public class UndergraduateStudent extends Student {

    public UndergraduateStudent(String name, int id) {
        super(name, id);
    }

    @Override
    public double calculateGPA() {
        if (getGrades().isEmpty()) {
            return 0.0;
        }
        double sum = 0;
        for (double grade : getGrades()) {
            // Convert grade to 4.0 scale
            sum += (grade / 100.0) * 4.0;
        }
        return sum / getGrades().size();
    }
}
GraduateStudent.java (Subclass)
This class also inherits from Student and provides its own calculateGPA() implementation, demonstrating polymorphism.

Java

import java.util.List;

public class GraduateStudent extends Student {

    public GraduateStudent(String name, int id) {
        super(name, id);
    }

    @Override
    public double calculateGPA() {
        if (getGrades().isEmpty()) {
            return 0.0;
        }
        double sum = 0;
        for (double grade : getGrades()) {
            // Convert grade to 5.0 scale
            sum += (grade / 100.0) * 5.0;
        }
        return sum / getGrades().size();
    }
}
Main.java (Driver Class)
This class demonstrates how to use the different student objects, showcasing polymorphism.

Java

public class Main {
    public static void main(String[] args) {
        // Create an undergraduate student object
        Student undergrad = new UndergraduateStudent("Alice", 101);
        undergrad.addGrade(85.0);
        undergrad.addGrade(92.0);

        // Create a graduate student object
        Student grad = new GraduateStudent("Bob", 201);
        grad.addGrade(95.0);
        grad.addGrade(88.0);
        
        // Demonstrate polymorphism by calling calculateGPA() on both objects
        System.out.println(undergrad.getName() + "'s GPA (4.0 scale): " + undergrad.calculateGPA());
        System.out.println(grad.getName() + "'s GPA (5.0 scale): " + grad.calculateGPA());
    }
}